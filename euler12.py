#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#

def generate_triangle_num(n) -> int:
    return int((n*(n+1))/2)

def generate_triangle(leng) -> list[int]:
    t = []
    for i in range(1, leng+1):
        t.append(generate_triangle_num(i))
    return t

def triangle_num(n) -> list[int]:
    t = []
    for i in range(n):
        if (l := (n / (i+1))).is_integer():
            t.append(int(l))
    return t

def draw_triangle(triangle):
    ret = 0
    for i in range(len(triangle)):
        ret = triangle_num(triangle[i])
        print(ret)
    return len(ret)

def find_divisors_from_triangle(divisors=500):
    found = False
    num = 1
    div = 0
    while not found:
        triangle = generate_triangle(num)
        print(f"TRIANGLE: ** {triangle[-1]} {'*'*22}")
        if (l := draw_triangle(triangle)) >= divisors:
            print(l)
            found = True
        else:
            print(f"DIVISORS: ** {l} {'*'*22}")
        num += 1

def main():
    find_divisors_from_triangle()


if __name__ == '__main__':
    main()
